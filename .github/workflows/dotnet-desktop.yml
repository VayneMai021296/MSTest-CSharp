# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Tự động tìm và thiết lập các đường dẫn
    - name: Set Solution and Project Paths
      shell: pwsh
      run: |
        # Tìm file .sln
        $solutionFile = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
        echo "Solution_Name=$($solutionFile.FullName)" >> $env:GITHUB_ENV
        
        # Tìm test project
        $testProject = Get-ChildItem -Path . -Filter *Tests.csproj -Recurse | Select-Object -First 1
        if (-not $testProject) {
            $testProject = Get-ChildItem -Path . -Filter *Test.csproj -Recurse | Select-Object -First 1
        }
        echo "Test_Project_Path=$($testProject.FullName)" >> $env:GITHUB_ENV
        
        # Tìm WAP project
        $wapProject = Get-ChildItem -Path . -Filter *.wapproj -Recurse | Select-Object -First 1
        if ($wapProject) {
            echo "Wap_Project_Directory=$($wapProject.Directory.FullName)" >> $env:GITHUB_ENV
            echo "Wap_Project_Path=$($wapProject.FullName)" >> $env:GITHUB_ENV
        }
        
        # Hiển thị các đường dẫn đã tìm thấy
        echo "Found Solution: $($solutionFile.FullName)"
        echo "Found Test Project: $($testProject.FullName)"
        if ($wapProject) {
            echo "Found WAP Project: $($wapProject.FullName)"
        }

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: |
        if ($env:Solution_Name){
            Write-Host "Running tests for solution: $env:Solution_Name"
            dotnet test $env:Solution_Name
        } else {
            Write-Host "No solution found, attempting to run tests in current directory"
            dotnet test
        }
      shell: pwsh

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      if: env.Wap_Project_Directory != ''
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      if: env.Wap_Project_Directory != ''
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      if: env.Wap_Project_Directory != ''
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package
    - name: Upload build artifacts
      if: env.Wap_Project_Directory != ''
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Build the project
    - name: Build
      run: |
        if ($env:Solution_Name) {
            msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }}
        }
      env:
        Configuration: ${{ matrix.configuration }}

    # Tìm và upload file exe
    - name: Find and Upload Executable
      if: matrix.configuration == 'Release'
      run: |
        # Tìm tất cả file .exe trong thư mục bin
        $exeFiles = Get-ChildItem -Path . -Filter *.exe -Recurse | 
                   Where-Object { $_.FullName -like "*\bin\${{ matrix.configuration }}*" }
        
        # Tạo thư mục để chứa các file exe
        New-Item -ItemType Directory -Force -Path ".\artifacts"
        
        # Copy tất cả file exe vào thư mục artifacts
        foreach ($exe in $exeFiles) {
            Write-Host "Found executable: $($exe.FullName)"
            Copy-Item $exe.FullName -Destination ".\artifacts\"
        }
      shell: pwsh

    # Upload artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}-Executables
        path: .\artifacts\
        if-no-files-found: error # 'warn' hoặc 'ignore' nếu bạn không muốn fail workflow khi không tìm thấy file
